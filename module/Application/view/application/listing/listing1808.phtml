<?php 
/**
 * ZF2 Buch Kapitel 18
 * 
 * Das Buch "Zend Framework 2 - Das Praxisbuch"
 * von Ralf Eggert ist im Galileo-Computing Verlag erschienen. 
 * ISBN 978-3-8362-2610-3
 * 
 * @package    Application
 * @author     Ralf Eggert <r.eggert@travello.de>
 * @copyright  Alle Listings sind urheberrechtlich geschützt!
 * @link       http://www.zendframeworkbuch.de/ und http://www.galileocomputing.de/3460
 */

/**
 * Listing 18.8 view script
 * 
 * @package    Application
 */

$this->headTitle('Listing 18.8');
$this->pageTitle('Listing 18.8');
?>
<h3>Factory-Klassen für <code>PizzaForm</code></h3>
<pre>
&lt;?php
namespace Pizza\Form;

use Zend\ServiceManager\FactoryInterface;
use Zend\ServiceManager\ServiceLocatorInterface;

class CreateFormFactory implements FactoryInterface
{
    public function createService(ServiceLocatorInterface $serviceLocator)
    {
        $inputFilterManager = $serviceLocator->get('InputFilterManager');
        
        $pizzaEntity   = $serviceLocator->get('Pizza\Entity\Pizza');
        $statusOptions = $pizzaEntity->getStatusNames();
        
        $crustTable   = $serviceLocator->get('Pizza\Table\Crust');
        $crustOptions = $crustTable->fetchOptions();
        
        $toppingTable   = $serviceLocator->get('Pizza\Table\Topping');
        $toppingOptions = $toppingTable->fetchOptions();
        
        $form = new PizzaForm('create');
        $form->addCsrfElement();
        $form->addStatusElement($statusOptions, 'status');
        $form->addNameElement();
        $form->addPriceElement();
        $form->addCrustElement($crustOptions, 'crust_id');
        $form->addToppingsElement($toppingOptions, 'toppings');
        $form->addDescriptionElement();
        $form->addSubmitElement('save', 'Speichern');
        $form->addSubmitElement('cancel', 'Abbrechen');
        $form->setInputFilter($inputFilterManager->get('Pizza\Filter\Pizza'));
        $form->setValidationGroup(array(
            'status', 'name', 'description', 'price', 'crust_id', 'toppings',
            'save', 'cancel'
        ));
        return $form;
    }
}

class UpdateFormFactory implements FactoryInterface
{
    public function createService(ServiceLocatorInterface $serviceLocator)
    {
        $inputFilterManager = $serviceLocator->get('InputFilterManager');
        
        $pizzaEntity   = $serviceLocator->get('Pizza\Entity\Pizza');
        $statusOptions = $pizzaEntity->getStatusNames();
        
        $crustTable   = $serviceLocator->get('Pizza\Table\Crust');
        $crustOptions = $crustTable->fetchOptions();
        
        $toppingTable   = $serviceLocator->get('Pizza\Table\Topping');
        $toppingOptions = $toppingTable->fetchOptions();
        
        $form = new PizzaForm('update');
        $form->addIdElement();
        $form->addCsrfElement();
        $form->addPictureElement();
        $form->addStatusElement($statusOptions, 'status');
        $form->addNameElement();
        $form->addPriceElement();
        $form->addCrustElement($crustOptions, 'crust_id');
        $form->addToppingsElement($toppingOptions, 'toppings');
        $form->addDescriptionElement();
        $form->addSubmitElement('save', 'Speichern');
        $form->addSubmitElement('cancel', 'Abbrechen');
        $form->setInputFilter($inputFilterManager->get('Pizza\Filter\Pizza'));
        $form->setValidationGroup(array(
            'id', 'status', 'name', 'description', 'price', 'crust_id', 
            'toppings', 'picture', 'save', 'cancel'
        ));
        return $form;
    }
}

class DeleteFormFactory implements FactoryInterface
{
    public function createService(ServiceLocatorInterface $serviceLocator)
    {
        $inputFilterManager = $serviceLocator->get('InputFilterManager');
        
        $form = new PizzaForm('delete');
        $form->addIdElement();
        $form->addCsrfElement();
        $form->addSubmitElement('delete', 'Löschen');
        $form->addSubmitElement('cancel', 'Abbrechen');
        $form->setInputFilter($inputFilterManager->get('Pizza\Filter\Pizza'));
        $form->setValidationGroup(array('id', 'delete', 'cancel'));
        return $form;
    }
}
</pre>
